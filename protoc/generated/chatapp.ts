/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: chatapp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        userName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("userName" in data && data.userName != undefined) {
                this.userName = data.userName;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get userName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set userName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        userName?: string;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.userName != null) {
            message.userName = data.userName;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            userName?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.userName != null) {
            data.userName = this.userName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.userName.length)
            writer.writeString(2, this.userName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.userName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        from?: User;
        msg?: string;
        time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("from" in data && data.from != undefined) {
                this.from = data.from;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
        }
    }
    get from() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set from(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_from() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set time(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        from?: ReturnType<typeof User.prototype.toObject>;
        msg?: string;
        time?: number;
    }): Message {
        const message = new Message({});
        if (data.from != null) {
            message.from = User.fromObject(data.from);
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.time != null) {
            message.time = data.time;
        }
        return message;
    }
    toObject() {
        const data: {
            from?: ReturnType<typeof User.prototype.toObject>;
            msg?: string;
            time?: number;
        } = {};
        if (this.from != null) {
            data.from = this.from.toObject();
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.time != null) {
            data.time = this.time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_from)
            writer.writeMessage(1, this.from, () => this.from.serialize(writer));
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (this.time != 0)
            writer.writeUint64(3, this.time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.from, () => message.from = User.deserialize(reader));
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                case 3:
                    message.time = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
export class Response extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        isOk?: boolean;
        errorCode?: number;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("isOk" in data && data.isOk != undefined) {
                this.isOk = data.isOk;
            }
            if ("errorCode" in data && data.errorCode != undefined) {
                this.errorCode = data.errorCode;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get isOk() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set isOk(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get errorCode() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set errorCode(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        isOk?: boolean;
        errorCode?: number;
        message?: string;
    }): Response {
        const message = new Response({});
        if (data.isOk != null) {
            message.isOk = data.isOk;
        }
        if (data.errorCode != null) {
            message.errorCode = data.errorCode;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            isOk?: boolean;
            errorCode?: number;
            message?: string;
        } = {};
        if (this.isOk != null) {
            data.isOk = this.isOk;
        }
        if (this.errorCode != null) {
            data.errorCode = this.errorCode;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.isOk != false)
            writer.writeBool(1, this.isOk);
        if (this.errorCode != 0)
            writer.writeInt32(2, this.errorCode);
        if (this.message.length)
            writer.writeString(3, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.isOk = reader.readBool();
                    break;
                case 2:
                    message.errorCode = reader.readInt32();
                    break;
                case 3:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Response {
        return Response.deserialize(bytes);
    }
}
export class UserList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        users?: User[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("users" in data && data.users != undefined) {
                this.users = data.users;
            }
        }
    }
    get users() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set users(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        users?: ReturnType<typeof User.prototype.toObject>[];
    }): UserList {
        const message = new UserList({});
        if (data.users != null) {
            message.users = data.users.map(item => User.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        } = {};
        if (this.users != null) {
            data.users = this.users.map((item: User) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.users.length)
            writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserList {
        return UserList.deserialize(bytes);
    }
}
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedChatService {
    static definition = {
        leaveChat: {
            path: "/Chat/leaveChat",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: User) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        },
        joinChat: {
            path: "/Chat/joinChat",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: User) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        },
        sendMessage: {
            path: "/Chat/sendMessage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        },
        receiveMessages: {
            path: "/Chat/receiveMessages",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: User) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
        },
        listenForUpdatedInChatRoom: {
            path: "/Chat/listenForUpdatedInChatRoom",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: User) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UserList) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UserList.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract leaveChat(call: grpc_1.ServerUnaryCall<User, Response>, callback: grpc_1.sendUnaryData<Response>): void;
    abstract joinChat(call: grpc_1.ServerUnaryCall<User, Response>, callback: grpc_1.sendUnaryData<Response>): void;
    abstract sendMessage(call: grpc_1.ServerUnaryCall<Message, Response>, callback: grpc_1.sendUnaryData<Response>): void;
    abstract receiveMessages(call: grpc_1.ServerWritableStream<User, Message>): void;
    abstract listenForUpdatedInChatRoom(call: grpc_1.ServerWritableStream<User, UserList>): void;
}
export class ChatClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatService.definition, "Chat", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    leaveChat: GrpcUnaryServiceInterface<User, Response> = (message: User, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.leaveChat(message, metadata, options, callback);
    };
    joinChat: GrpcUnaryServiceInterface<User, Response> = (message: User, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.joinChat(message, metadata, options, callback);
    };
    sendMessage: GrpcUnaryServiceInterface<Message, Response> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.sendMessage(message, metadata, options, callback);
    };
    receiveMessages: GrpcStreamServiceInterface<User, Message> = (message: User, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Message> => {
        return super.receiveMessages(message, metadata, options);
    };
    listenForUpdatedInChatRoom: GrpcStreamServiceInterface<User, UserList> = (message: User, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<UserList> => {
        return super.listenForUpdatedInChatRoom(message, metadata, options);
    };
}
