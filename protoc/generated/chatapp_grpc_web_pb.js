/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: chatapp.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./chatapp_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.Response>}
 */
const methodDescriptor_Chat_leaveChat = new grpc.web.MethodDescriptor(
  '/Chat/leaveChat',
  grpc.web.MethodType.UNARY,
  proto.User,
  proto.Response,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.leaveChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/leaveChat',
      request,
      metadata || {},
      methodDescriptor_Chat_leaveChat,
      callback);
};


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.leaveChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/leaveChat',
      request,
      metadata || {},
      methodDescriptor_Chat_leaveChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.Response>}
 */
const methodDescriptor_Chat_joinChat = new grpc.web.MethodDescriptor(
  '/Chat/joinChat',
  grpc.web.MethodType.UNARY,
  proto.User,
  proto.Response,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.joinChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/joinChat',
      request,
      metadata || {},
      methodDescriptor_Chat_joinChat,
      callback);
};


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.joinChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/joinChat',
      request,
      metadata || {},
      methodDescriptor_Chat_joinChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Message,
 *   !proto.Response>}
 */
const methodDescriptor_Chat_sendMessage = new grpc.web.MethodDescriptor(
  '/Chat/sendMessage',
  grpc.web.MethodType.UNARY,
  proto.Message,
  proto.Response,
  /**
   * @param {!proto.Message} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.Message} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/sendMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_sendMessage,
      callback);
};


/**
 * @param {!proto.Message} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/sendMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_sendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.Message>}
 */
const methodDescriptor_Chat_receiveMessages = new grpc.web.MethodDescriptor(
  '/Chat/receiveMessages',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.User,
  proto.Message,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Message.deserializeBinary
);


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.Message>}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.receiveMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/receiveMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_receiveMessages);
};


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.Message>}
 *     The XHR Node Readable Stream
 */
proto.ChatPromiseClient.prototype.receiveMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/receiveMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_receiveMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.UserList>}
 */
const methodDescriptor_Chat_listenForUpdatedInChatRoom = new grpc.web.MethodDescriptor(
  '/Chat/listenForUpdatedInChatRoom',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.User,
  proto.UserList,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserList.deserializeBinary
);


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.UserList>}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.listenForUpdatedInChatRoom =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/listenForUpdatedInChatRoom',
      request,
      metadata || {},
      methodDescriptor_Chat_listenForUpdatedInChatRoom);
};


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.UserList>}
 *     The XHR Node Readable Stream
 */
proto.ChatPromiseClient.prototype.listenForUpdatedInChatRoom =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/listenForUpdatedInChatRoom',
      request,
      metadata || {},
      methodDescriptor_Chat_listenForUpdatedInChatRoom);
};


module.exports = proto;

